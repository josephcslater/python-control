sudo: false
language: python
dist: xenial

services:
  - xvfb

cache:
  apt: true
  pip: true
  directories:
    - $HOME/.cache/pip
    - $HOME/.local

# Test against earliest supported (Python 3) release and latest stable release
python:
  - "3.9"
  - "3.6"

env:
  - SCIPY=scipy SLYCOT=conda       # default, with slycot via conda
  - SCIPY=scipy SLYCOT=            # default, w/out slycot

# Add optional builds that test against latest version of slycot, python
jobs:
  include:
    - name: "Python 3.9, slycot=source, array and matrix"
      python: "3.9"
      env: SCIPY=scipy SLYCOT=source PYTHON_CONTROL_ARRAY_AND_MATRIX=1
    # Because there were significant changes in SciPy between v0 and v1, we
    # also test against the latest v0 (without Slycot) for old pythons.
    # newer pythons should always use newer SciPy.
    - name: "Python 2.7, Scipy 0.19.1"
      python: "2.7"
      env: SCIPY="scipy==0.19.1" SLYCOT=
    - name: "Python 3.6, Scipy 0.19.1"
      python: "3.6"
      env: SCIPY="scipy==0.19.1" SLYCOT=

  allow_failures:
    - env: SCIPY=scipy SLYCOT=source
    - env: SCIPY=scipy SLYCOT=source PYTHON_CONTROL_ARRAY_AND_MATRIX=1


# install required system libraries
before_install:
  # Install gfortran for testing slycot; use apt-get instead of conda in
  # order to include the proper CXXABI dependency (updated in GCC 4.9)
  # Note: these commands should match the slycot .travis.yml configuration
  - if [[ "$SLYCOT" = "source" ]]; then
      sudo apt-get update -qq;
      sudo apt-get install liblapack-dev libblas-dev;
      sudo apt-get install gfortran;
    fi
  # use miniconda to install numpy/scipy, to avoid lengthy build from source
  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda config --add channels python-control
  - conda info -a
  - conda create -q -n test-environment python="$TRAVIS_PYTHON_VERSION" pip coverage
  - source activate test-environment
  # Install scikit-build for the build process if slycot is being used
  - if [[ "$SLYCOT" = "source" ]]; then
      conda install openblas;
      conda install -c conda-forge cmake scikit-build;
    fi
  # Make sure to look in the right place for python libraries (for slycot)
  - export LIBRARY_PATH="$HOME/miniconda/envs/test-environment/lib"
  - conda install pytest
  # coveralls not in conda repos => install via pip instead
  - pip install coveralls

# Install packages
install:
  # Install packages needed by python-control
  - conda install $SCIPY matplotlib

  # Figure out how to build slycot
  #   source: use "Unix Makefiles" as generator; Ninja cannot handle Fortran
  #   conda: use pre-compiled version of slycot on conda-forge
  - if [[ "$SLYCOT" = "source" ]]; then
      git clone https://github.com/python-control/Slycot.git slycot;
      cd slycot; python setup.py install -G "Unix Makefiles"; cd ..;
    elif [[ "$SLYCOT" = "conda" ]]; then
      conda install -c conda-forge slycot;
    fi

# command to run tests
script:
  - 'if [ $SLYCOT != "" ]; then python -c "import slycot"; fi'
  - coverage run -m pytest control/tests

  # only run examples if Slycot is install
  # set PYTHONPATH for examples
  # pmw needed for examples/tfvis.py
  # future is needed for Python 2, also for examples/tfvis.py
  - if [[ "$SLYCOT" != "" ]]; then
      export PYTHONPATH=$PWD;
      conda install -c conda-forge pmw future;
      (cd examples; bash run_examples.sh);
    fi

after_success:
  - coveralls
